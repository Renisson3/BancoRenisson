// <auto-generated />
using System;
using BancoRenisson.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BancoRenisson.Infra.Data.Migrations
{
    [DbContext(typeof(ContextMySql))]
    [Migration("20200919005818_CreateInitialMigration")]
    partial class CreateInitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BancoRenisson.Domain.ContasCorrentes.CurrentAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("cor_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnName("cor_dataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnName("cor_dataUltimaAtualizacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NumberAccount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cor_numero")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("cor_nomeTitular")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Value")
                        .HasColumnName("cor_valorDisponivel")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasAlternateKey("NumberAccount");

                    b.ToTable("tbl_COR_ContaCorrente");
                });

            modelBuilder.Entity("BancoRenisson.Domain.Movimentacoes.Movement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("mov_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CurrentAccountId")
                        .HasColumnName("cor_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnName("mov_dataCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateLastUpdate")
                        .HasColumnName("mov_dataUltimaAtualizacao")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnName("mov_descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Operation")
                        .HasColumnName("mov_tipo_operacao")
                        .HasColumnType("int");

                    b.Property<string>("OperationDescription")
                        .IsRequired()
                        .HasColumnName("mov_tipo_operacao_descricao")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("ValueMovement")
                        .HasColumnName("mov_valor")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAccountId");

                    b.ToTable("tbl_MOV_Movimentacao");
                });

            modelBuilder.Entity("BancoRenisson.Domain.Movimentacoes.Movement", b =>
                {
                    b.HasOne("BancoRenisson.Domain.ContasCorrentes.CurrentAccount", "CurrentAccount")
                        .WithMany("Movements")
                        .HasForeignKey("CurrentAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
